
Class:				 
	------
	A class is a blueprint or a template for creating objects.
	
	Example:
	--------
	Think of a class as a blueprint for a house.
	It specifies how the house should be built,including the number of rooms, the layout, and other details.
	
	syntax:
	-------
	public class ClassName {
							   
							   }
							   
	Object:
	-------
     --> Object is an Member /instance of a class.
	 -->object has an identity, a behavior and a state.
	 --> The state of an object is stored in fields (variables)
	 -->methods (functions) display the object's behavior. 
	 Objects are created at runtime from templates.
     It is created using the new keyword followed by the class's constructor. 
	
	syntax:
	--------
	
	ClassName object = new ClassName();
	object.---->call the member(var/method)


Once an object is created, you can access its properties 
and methods using dot notation.


Method signature
--------------------
1.access modifier---permission
   a.public----Anyone can access(public transport)
   b.private---Members of my class(with in same class)
   c.protected---only can be access from same package(week3)
   d.default----only can be access from same package

2.return type----void
Primitive and Non Primitive data type

The return statement can be used in two ways:
----------------------------------------------

Returning a value: When a method has a return type
(other than void), the return statement is used to return a value of that type. 



Exiting a method: When a method does not have a returntype(i.e., it returns void)
the return statement is used to exit the method.

public void printNumbers(int n) {
    for (int i = 1; i <= n; i++) {
        System.out.println(i);
        if (i == 5) {
            return;
        }
    }
}
3.methodName
--->it should be meaningful
--->Lowercase following uppercase
ex:driveCar();

4.Input argument
It is the data needed for the method to work

It can be no arguments, single or multiple arguments
It can be primitive and non primitive and mix of both


Recap:
------
Java Basics
 -----------
Front-end automation refers to the process of automating the testing and validation
of the user interface (UI) and user experience (UX) aspects of a software application. 
It involves the use of automation tools and frameworks to simulate user interactions,
validate UI elements, and ensure the proper functioning of the front-end components.

Front-end automation typically focuses on testing the functionality, behavior, and visual aspects of the application's UI. 
It involves automating interactions such as clicking buttons, entering text into input fields, selecting options from dropdowns,
and verifying that the expected changes occur in the UI.

Back-end automation refers to the process of automating the
testing and validation of the server-side or back-end components of a software application.
It involves automating the testing of APIs, databases, business logic, and other server-side functionalities.

Java is a popular programming language for automation for several reasons:

Platform Independence: Java is platform-independent, which means you can write code on one platform (e.g., Windows) and run it on another (e.g., Linux) without modification. This is important in automation because it allows you to write code that can be executed on different operating systems and environments.

Large Community and Libraries: Java has a large and active community of developers, which means there are many resources and libraries available for automation tasks. You can find open-source libraries and frameworks like Selenium, Appium, and TestNG that are widely used for test automation in Java.

Object-Oriented Programming (OOP): Java is an object-oriented programming language, which promotes good software design practices. This makes it easier to create well-structured and maintainable code for automation projects.

Cross-Browser Compatibility: When automating web applications, cross-browser compatibility is crucial. Java, along with tools like Selenium WebDriver, provides robust support for automating web applications across different browsers.


Multi-Threading: Automation often involves running tests or tasks concurrently, and Java's multi-threading capabilities allow you to do this efficiently, which can significantly speed up the automation process.

Community Support: Java has a well-established online community with a wealth of documentation, forums, and tutorials.
This makes it easier for developers to find help and solutions to problems they encounter during automation projects.

Integration Capabilities: Java can easily integrate with other tools and technologies commonly used in automation,
such as databases, APIs, and various testing frameworks.


It's important to note that while Java is a popular choice for automation, the choice of programming language for automation can vary depending on the specific requirements and preferences of a project or team.

Eclipse is a popular integrated development environment (IDE) 

onc place to write,compile,get result.

Open Source: Eclipse is an open-source IDE, which means it's free to use

Code Assistance: Eclipse provides intelligent code completion,
                --> real-time error checking
				--> suggestions while you type, helping you write correct
Eclipse

How to create a  java project
--------------
File----new ----project
new window
java---java project---next

new window

Enter the project name(LearnJava) and give finish

How to create a  Maven project
--------------
File----new ----project

new window

Maven---Maven project---next
new window
check the checkbox Create a simple project  click next
Group Id ---Lowercase(organization)
ArtifactID----project name(Start with upper case)
version-0.0.1
finish				

What is JVM JRE JDK
JDK (Java Development Kit):
           The Java Development Kit is a software package that includes 
           JRE along with development tools like 
                 compilers
				 debuggers
				 utilities
It provides everything needed for developing, testing, and running Java applications.

JVM (Java Virtual Machine):It  Provide runtime environment -java bytecode executed
                           i)   Load code
						   ii)  verifies code
						   iii) Executes code

JRE (Java Runtime Environment):Jvm+Libraries set

                               JRE implement of jvm
							   check the format before loading into jvm
							   
	Class:				 
	------
	A class is a blueprint or a template for creating objects.
	
	Example:
	--------
	Think of a class as a blueprint for a house.
	It specifies how the house should be built,including the number of rooms, the layout, and other details.
	
	syntax:
	-------
	public class ClassName {
							   
							   }
							   
					
DataType
---------
Data types are used to specify the type of data that can be stored in a variable,
as well as the operations that can be performed on that data.

Example:
--------
colour  -----gray   String
model   -----suv    String
regNum  ------122334
noWheel -----4


primitive datatype
boolean true/false
store the whole number(both positive and negative)
------------------------
byte----small size 8bit-- 1 2 3 4 
short ---store 16 bit---upto 5 digit
int---32 bit ---upto 9 digit
long--64 bit more then 10 digit can store L l

Store the decimal value
-----------------------
float---upto 5 digit 32 bit f F
double---upto more  than 5 64 bit d

Single Character
----------------
char 
with in single quote 'K'
String "TESTLEAF"


Java has two categories of data types: 
primitive data types and Non-primitive data types.

Primitive data types 

boolean: represents true/false values
byte: represents a small integer value 8
short: represents a short integer value 16
int: represents an integer value 32
long: represents a long integer value 64l
float: represents a  floating-point value 32 f
double: represents a  floating-point value 64 d
char: represents a single character value'T'

Non-primitive

String: represents a sequence of characters  "Testleaf"
Arrays: represents a collection of elements of the same type
Classes: represents objects with properties and behaviors

Control Statements:

They allow you to determine the order in which statements
are executed based on certain conditions or repetitions.

Java provides several types of control statements:

Conditional Statements:(Selection)
------------------------
if statement: It executes a block of code if a specified condition is true.

if-else statement: It executes one block of code if a specified condition
is true and another block if it is false.

nested if-else statement: It allows you to have an if-else statement
inside another if-else statement.

Looping Statements:(Iteration)
-------------------
for loop: It repeats a block of code a specified number of times.

syntax:

for(int i=0;i<=5;i++ ){//1 2 3 4 5

}


while loop: While loops are commonly used when you want to repeat a block of code until a specific condition becomes false. 
They are flexible and can handle a wide range of scenarios.

do-while loop: It executes a block of code once 
and then repeatedly executes it as long as a specified condition is true.

Operators:
operators are special symbols that perform specific operations
 
1.Arithmetic operators:
These operators are used to perform mathematical operations
such as addition, subtraction, multiplication,and division.
+ (addition)
- (subtraction)
* (multiplication)
/ (division)-Que
% (modulus or remainder)

2.Assignment operators:
These operators are used to assign values to variables. 
= (assignment)
+= (add and assign)
-= (subtract and assign)
*= (multiply and assign)
/= (divide and assign)
%= (modulus and assign)

3.Comparison operators:
These operators are used to compare two value
and return a boolean value (true or false). 
== (equal to)
!= (not equal to)
> (greater than)
< (less than)
>= (greater than or equal to)
<= (less than or equal to)

4.Logical operators:
These operators are used to combine two or more boolean expressions
and return a boolean value.   &&-->AND * 
&& (logical and) 
AND----->&&
1*0=0     T F F
0*1=0     F T F
0*0=0     F F F
1*1=1     T T T

(5==5)&&(5<5)---false

|| (logical or)
addition
OR------>||
1+0=1    T F T
0+1=1    F T T
1+1=1    T T T
0+0=0    F F F

(5==5)||(5<5)---True

! (logical not or negation)
1---0   T F

0---1   F  T
boolean flag=false;
!flag

5. unary operator
Increment operator (++) i=0 1
Decrement operator (--)


Jump Statements:

break statement: It terminates the current loop or switch statement
and transfers control to the statement immediately following it.

continue statement: It skips the rest of the current iteration 
of a loop and proceeds to the next iteration.

restatement: It terminates the execution of a method and returns a value to the caller.
Returning a value: When a method has a return type
(other than void), the return statement is used to return a value of that type. 

Arrays
-------
Using Array Literal 

int num=10;

int nums[]={10,20,30,40}

Using Instantiation

int[] nums =new int[5];

a[0]=10;
a[1]=11;
a[2]=12;
a[3]=90;
a[4]=10;
a[5]=?? Array index out of bound



